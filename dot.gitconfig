# See: http://stackoverflow.com/questions/267761/what-does-your-gitconfig-contain
[color]
	diff = auto
	status = auto
	branch = auto
	log = auto
	interactive = auto
	ui = auto
	pager = true

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green


[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

# See http://git.or.cz/gitwiki/Aliases
[alias]
	st = status
	ci = commit
	br = branch
	co = checkout
	lg = log --decorate=short
	lp = log -p
	lt = log --topo-order

	dif = diff --color-words -b

	gl =  log --graph --date-order --decorate=short --name-status --find-copies --find-renames
	lg = log --graph --date-order --all --pretty=format:'%Cred%h%Creset %x09-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	la = log --graph --decorate --pretty=oneline --abbrev-commit --all

	ls = ls-files

	# usage example: git w -n5
	w = whatchanged
	# given a string for an author, try to figure out full name and email:
	whois = !sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\
\" --author=\"$1\"' -
	# given any git object, try to show it briefly
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
	# Search for a given string in all patches and print commit messages
	# example: search for any commit that adds or removes string "foobar"
	#     git searchcommits foobar
	# example: search commits for string "foobar" in directory src/lib
	#     git searchcommits foobar src/lib
	# example: search commits for "foobar", print full diff of commit with 1 line context
	#     git searchcommits foobar --pickaxe-all -U1 src/lib
	searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""
	# show list of contributors in descending order by number of commits
	rank = shortlog -sn --no-merges --
	# These two aliases wrap commonly used options to git diff, and accept the
	# full range of arguments that diff accepts:
	changes = diff --name-status -r
	diffstat = diff --stat -r
	# Use graphviz for display
	#
	# This produces output that can be displayed using dotty, for example:
	#
	# $ git graphviz HEAD~100..HEAD~60 | dotty /dev/stdin
	# $ git graphviz --first-parent master | dotty /dev/stdin
	graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

	# http://brettterpstra.com/2014/08/04/shell-tricks-one-git-alias-to-rule-them-all/
	finda = "!grepalias() { git config --global --get-regexp alias | grep -i \"$1\" | awk -v nr=2 '{sub(/^alias\\./,\"\")};{printf \"\\033[31m%_16s\\033[1;37m\", $1};{sep=FS};{for (x=nr; x<=NF; x++) {printf \"%s%s\", sep, $x; }; print \"\\033[0;39m\"}'; }; grepalias"

# See: https://git-scm.com/docs/git-config#_conditional_includes
[includeIf "gitdir:~/works/spn/"]
	path = ~/works/spn/gitconfig
[includeIf "gitdir:~/wc/"]
	path = ~/wc/gitconfig

[core]
	ignorecase = false
	excludesfile = ~/.gitignore
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	# This setting tells git to convert the newlines to the systemâ€™s standard
	# when checking out files, and to LF newlines when committing in
#	autocrlf = true

[branch]
	# tells git-branch and git-checkout to setup new branches so that
	# git-pull(1) will appropriately merge from that remote branch.
	# Recommended.  Without this, you will have to add --track to your branch
	# command or manually merge remote tracking branches with "fetch" and then
	# "merge".
	autosetupmerge = true

[http]
	postBuffer = 209715200

[tig]
	line-graphics = ascii

[url "https://"]
	insteadOf = git://

